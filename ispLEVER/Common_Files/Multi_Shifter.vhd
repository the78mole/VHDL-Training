-- VHDL netlist generated by SCUBA ispLever_v60_PROD_Build (36)
-- Module  Version: 3.0
--C:\ispTOOLS6_0_STRT\ispfpga\bin\nt\scuba.exe -w -n Multi_Shifter -lang vhdl -synth synplify -bus_exp 7 -bb -arch ep5g00p -type dspmult -simple_portname -widtha 8 -widthb 16 -widthp 24 -PL_stages 1 -clk0 -ce0 -rst0 -e 

-- Sun Nov 26 00:53:39 2006

library IEEE;
use IEEE.std_logic_1164.all;
-- synopsys translate_off
library ecp;
use ecp.components.all;
-- synopsys translate_on

entity Multi_Shifter is
    port (
        Clock: in  std_logic; 
        ClkEn: in  std_logic; 
        Aclr: in  std_logic; 
        DataA: in  std_logic_vector(7 downto 0); 
        DataB: in  std_logic_vector(15 downto 0); 
        Result: out  std_logic_vector(23 downto 0));
end Multi_Shifter;

architecture Structure of Multi_Shifter is

    -- internal signal declarations
    signal scuba_vhi: std_logic;
    signal scuba_vlo: std_logic;

    -- local component declarations
    component VHI
        port (Z: out  std_logic);
    end component;
    component VLO
        port (Z: out  std_logic);
    end component;
    component MULT18X18
    -- synopsys translate_off
        generic (GSR : in String; SHIFT_IN_B : in String; 
                SHIFT_IN_A : in String; REG_SIGNEDAB_1_RST : in String; 
                REG_SIGNEDAB_1_CE : in String; 
                REG_SIGNEDAB_1_CLK : in String; 
                REG_SIGNEDAB_0_RST : in String; 
                REG_SIGNEDAB_0_CE : in String; 
                REG_SIGNEDAB_0_CLK : in String; 
                REG_OUTPUT_RST : in String; REG_OUTPUT_CE : in String; 
                REG_OUTPUT_CLK : in String; REG_PIPELINE_RST : in String; 
                REG_PIPELINE_CE : in String; 
                REG_PIPELINE_CLK : in String; REG_INPUTB_RST : in String; 
                REG_INPUTB_CE : in String; REG_INPUTB_CLK : in String; 
                REG_INPUTA_RST : in String; REG_INPUTA_CE : in String; 
                REG_INPUTA_CLK : in String);
    -- synopsys translate_on
        port (A0: in  std_logic; A1: in  std_logic; A2: in  std_logic; 
            A3: in  std_logic; A4: in  std_logic; A5: in  std_logic; 
            A6: in  std_logic; A7: in  std_logic; A8: in  std_logic; 
            A9: in  std_logic; A10: in  std_logic; A11: in  std_logic; 
            A12: in  std_logic; A13: in  std_logic; A14: in  std_logic; 
            A15: in  std_logic; A16: in  std_logic; A17: in  std_logic; 
            SRIA0: in  std_logic; SRIA1: in  std_logic; 
            SRIA2: in  std_logic; SRIA3: in  std_logic; 
            SRIA4: in  std_logic; SRIA5: in  std_logic; 
            SRIA6: in  std_logic; SRIA7: in  std_logic; 
            SRIA8: in  std_logic; SRIA9: in  std_logic; 
            SRIA10: in  std_logic; SRIA11: in  std_logic; 
            SRIA12: in  std_logic; SRIA13: in  std_logic; 
            SRIA14: in  std_logic; SRIA15: in  std_logic; 
            SRIA16: in  std_logic; SRIA17: in  std_logic; 
            B0: in  std_logic; B1: in  std_logic; B2: in  std_logic; 
            B3: in  std_logic; B4: in  std_logic; B5: in  std_logic; 
            B6: in  std_logic; B7: in  std_logic; B8: in  std_logic; 
            B9: in  std_logic; B10: in  std_logic; B11: in  std_logic; 
            B12: in  std_logic; B13: in  std_logic; B14: in  std_logic; 
            B15: in  std_logic; B16: in  std_logic; B17: in  std_logic; 
            SRIB0: in  std_logic; SRIB1: in  std_logic; 
            SRIB2: in  std_logic; SRIB3: in  std_logic; 
            SRIB4: in  std_logic; SRIB5: in  std_logic; 
            SRIB6: in  std_logic; SRIB7: in  std_logic; 
            SRIB8: in  std_logic; SRIB9: in  std_logic; 
            SRIB10: in  std_logic; SRIB11: in  std_logic; 
            SRIB12: in  std_logic; SRIB13: in  std_logic; 
            SRIB14: in  std_logic; SRIB15: in  std_logic; 
            SRIB16: in  std_logic; SRIB17: in  std_logic; 
            SIGNEDAB: in  std_logic; CE0: in  std_logic; 
            CE1: in  std_logic; CE2: in  std_logic; CE3: in  std_logic; 
            CLK0: in  std_logic; CLK1: in  std_logic; 
            CLK2: in  std_logic; CLK3: in  std_logic; 
            RST0: in  std_logic; RST1: in  std_logic; 
            RST2: in  std_logic; RST3: in  std_logic; 
            SROA0: out  std_logic; SROA1: out  std_logic; 
            SROA2: out  std_logic; SROA3: out  std_logic; 
            SROA4: out  std_logic; SROA5: out  std_logic; 
            SROA6: out  std_logic; SROA7: out  std_logic; 
            SROA8: out  std_logic; SROA9: out  std_logic; 
            SROA10: out  std_logic; SROA11: out  std_logic; 
            SROA12: out  std_logic; SROA13: out  std_logic; 
            SROA14: out  std_logic; SROA15: out  std_logic; 
            SROA16: out  std_logic; SROA17: out  std_logic; 
            SROB0: out  std_logic; SROB1: out  std_logic; 
            SROB2: out  std_logic; SROB3: out  std_logic; 
            SROB4: out  std_logic; SROB5: out  std_logic; 
            SROB6: out  std_logic; SROB7: out  std_logic; 
            SROB8: out  std_logic; SROB9: out  std_logic; 
            SROB10: out  std_logic; SROB11: out  std_logic; 
            SROB12: out  std_logic; SROB13: out  std_logic; 
            SROB14: out  std_logic; SROB15: out  std_logic; 
            SROB16: out  std_logic; SROB17: out  std_logic; 
            P0: out  std_logic; P1: out  std_logic; P2: out  std_logic; 
            P3: out  std_logic; P4: out  std_logic; P5: out  std_logic; 
            P6: out  std_logic; P7: out  std_logic; P8: out  std_logic; 
            P9: out  std_logic; P10: out  std_logic; P11: out  std_logic; 
            P12: out  std_logic; P13: out  std_logic; 
            P14: out  std_logic; P15: out  std_logic; 
            P16: out  std_logic; P17: out  std_logic; 
            P18: out  std_logic; P19: out  std_logic; 
            P20: out  std_logic; P21: out  std_logic; 
            P22: out  std_logic; P23: out  std_logic; 
            P24: out  std_logic; P25: out  std_logic; 
            P26: out  std_logic; P27: out  std_logic; 
            P28: out  std_logic; P29: out  std_logic; 
            P30: out  std_logic; P31: out  std_logic; 
            P32: out  std_logic; P33: out  std_logic; 
            P34: out  std_logic; P35: out  std_logic);
    end component;
    attribute GSR : string; 
    attribute SHIFT_IN_B : string; 
    attribute SHIFT_IN_A : string; 
    attribute REG_SIGNEDAB_1_RST : string; 
    attribute REG_SIGNEDAB_1_CE : string; 
    attribute REG_SIGNEDAB_1_CLK : string; 
    attribute REG_SIGNEDAB_0_RST : string; 
    attribute REG_SIGNEDAB_0_CE : string; 
    attribute REG_SIGNEDAB_0_CLK : string; 
    attribute REG_OUTPUT_RST : string; 
    attribute REG_OUTPUT_CE : string; 
    attribute REG_OUTPUT_CLK : string; 
    attribute REG_PIPELINE_RST : string; 
    attribute REG_PIPELINE_CE : string; 
    attribute REG_PIPELINE_CLK : string; 
    attribute REG_INPUTB_RST : string; 
    attribute REG_INPUTB_CE : string; 
    attribute REG_INPUTB_CLK : string; 
    attribute REG_INPUTA_RST : string; 
    attribute REG_INPUTA_CE : string; 
    attribute REG_INPUTA_CLK : string; 
    attribute GSR of dsp_0 : label is "ENABLED";
    attribute SHIFT_IN_B of dsp_0 : label is "FALSE";
    attribute SHIFT_IN_A of dsp_0 : label is "FALSE";
    attribute REG_SIGNEDAB_1_RST of dsp_0 : label is "RST0";
    attribute REG_SIGNEDAB_1_CE of dsp_0 : label is "CE0";
    attribute REG_SIGNEDAB_1_CLK of dsp_0 : label is "NONE";
    attribute REG_SIGNEDAB_0_RST of dsp_0 : label is "RST0";
    attribute REG_SIGNEDAB_0_CE of dsp_0 : label is "CE0";
    attribute REG_SIGNEDAB_0_CLK of dsp_0 : label is "NONE";
    attribute REG_OUTPUT_RST of dsp_0 : label is "RST0";
    attribute REG_OUTPUT_CE of dsp_0 : label is "CE0";
    attribute REG_OUTPUT_CLK of dsp_0 : label is "NONE";
    attribute REG_PIPELINE_RST of dsp_0 : label is "RST0";
    attribute REG_PIPELINE_CE of dsp_0 : label is "CE0";
    attribute REG_PIPELINE_CLK of dsp_0 : label is "CLK0";
    attribute REG_INPUTB_RST of dsp_0 : label is "RST0";
    attribute REG_INPUTB_CE of dsp_0 : label is "CE0";
    attribute REG_INPUTB_CLK of dsp_0 : label is "NONE";
    attribute REG_INPUTA_RST of dsp_0 : label is "RST0";
    attribute REG_INPUTA_CE of dsp_0 : label is "CE0";
    attribute REG_INPUTA_CLK of dsp_0 : label is "NONE";

begin
    -- component instantiation statements
    scuba_vhi_inst: VHI
        port map (Z=>scuba_vhi);

    scuba_vlo_inst: VLO
        port map (Z=>scuba_vlo);

    dsp_0: MULT18X18
        -- synopsys translate_off
        generic map (GSR=> "ENABLED", SHIFT_IN_B=> "FALSE", SHIFT_IN_A=> "FALSE", 
        REG_SIGNEDAB_1_RST=> "RST0", REG_SIGNEDAB_1_CE=> "CE0", 
        REG_SIGNEDAB_1_CLK=> "NONE", REG_SIGNEDAB_0_RST=> "RST0", 
        REG_SIGNEDAB_0_CE=> "CE0", REG_SIGNEDAB_0_CLK=> "NONE", 
        REG_OUTPUT_RST=> "RST0", REG_OUTPUT_CE=> "CE0", REG_OUTPUT_CLK=> "NONE", 
        REG_PIPELINE_RST=> "RST0", REG_PIPELINE_CE=> "CE0", 
        REG_PIPELINE_CLK=> "CLK0", REG_INPUTB_RST=> "RST0", 
        REG_INPUTB_CE=> "CE0", REG_INPUTB_CLK=> "NONE", REG_INPUTA_RST=> "RST0", 
        REG_INPUTA_CE=> "CE0", REG_INPUTA_CLK=> "NONE")
        -- synopsys translate_on
        port map (A0=>scuba_vlo, A1=>scuba_vlo, A2=>scuba_vlo, 
            A3=>scuba_vlo, A4=>scuba_vlo, A5=>scuba_vlo, A6=>scuba_vlo, 
            A7=>scuba_vlo, A8=>scuba_vlo, A9=>scuba_vlo, A10=>DataA(0), 
            A11=>DataA(1), A12=>DataA(2), A13=>DataA(3), A14=>DataA(4), 
            A15=>DataA(5), A16=>DataA(6), A17=>DataA(7), 
            SRIA0=>scuba_vlo, SRIA1=>scuba_vlo, SRIA2=>scuba_vlo, 
            SRIA3=>scuba_vlo, SRIA4=>scuba_vlo, SRIA5=>scuba_vlo, 
            SRIA6=>scuba_vlo, SRIA7=>scuba_vlo, SRIA8=>scuba_vlo, 
            SRIA9=>scuba_vlo, SRIA10=>scuba_vlo, SRIA11=>scuba_vlo, 
            SRIA12=>scuba_vlo, SRIA13=>scuba_vlo, SRIA14=>scuba_vlo, 
            SRIA15=>scuba_vlo, SRIA16=>scuba_vlo, SRIA17=>scuba_vlo, 
            B0=>scuba_vlo, B1=>scuba_vlo, B2=>DataB(0), B3=>DataB(1), 
            B4=>DataB(2), B5=>DataB(3), B6=>DataB(4), B7=>DataB(5), 
            B8=>DataB(6), B9=>DataB(7), B10=>DataB(8), B11=>DataB(9), 
            B12=>DataB(10), B13=>DataB(11), B14=>DataB(12), 
            B15=>DataB(13), B16=>DataB(14), B17=>DataB(15), 
            SRIB0=>scuba_vlo, SRIB1=>scuba_vlo, SRIB2=>scuba_vlo, 
            SRIB3=>scuba_vlo, SRIB4=>scuba_vlo, SRIB5=>scuba_vlo, 
            SRIB6=>scuba_vlo, SRIB7=>scuba_vlo, SRIB8=>scuba_vlo, 
            SRIB9=>scuba_vlo, SRIB10=>scuba_vlo, SRIB11=>scuba_vlo, 
            SRIB12=>scuba_vlo, SRIB13=>scuba_vlo, SRIB14=>scuba_vlo, 
            SRIB15=>scuba_vlo, SRIB16=>scuba_vlo, SRIB17=>scuba_vlo, 
            SIGNEDAB=>scuba_vlo, CE0=>ClkEn, CE1=>scuba_vhi, 
            CE2=>scuba_vhi, CE3=>scuba_vhi, CLK0=>Clock, CLK1=>scuba_vlo, 
            CLK2=>scuba_vlo, CLK3=>scuba_vlo, RST0=>Aclr, 
            RST1=>scuba_vlo, RST2=>scuba_vlo, RST3=>scuba_vlo, 
            SROA0=>open, SROA1=>open, SROA2=>open, SROA3=>open, 
            SROA4=>open, SROA5=>open, SROA6=>open, SROA7=>open, 
            SROA8=>open, SROA9=>open, SROA10=>open, SROA11=>open, 
            SROA12=>open, SROA13=>open, SROA14=>open, SROA15=>open, 
            SROA16=>open, SROA17=>open, SROB0=>open, SROB1=>open, 
            SROB2=>open, SROB3=>open, SROB4=>open, SROB5=>open, 
            SROB6=>open, SROB7=>open, SROB8=>open, SROB9=>open, 
            SROB10=>open, SROB11=>open, SROB12=>open, SROB13=>open, 
            SROB14=>open, SROB15=>open, SROB16=>open, SROB17=>open, 
            P0=>open, P1=>open, P2=>open, P3=>open, P4=>open, P5=>open, 
            P6=>open, P7=>open, P8=>open, P9=>open, P10=>open, P11=>open, 
            P12=>Result(0), P13=>Result(1), P14=>Result(2), 
            P15=>Result(3), P16=>Result(4), P17=>Result(5), 
            P18=>Result(6), P19=>Result(7), P20=>Result(8), 
            P21=>Result(9), P22=>Result(10), P23=>Result(11), 
            P24=>Result(12), P25=>Result(13), P26=>Result(14), 
            P27=>Result(15), P28=>Result(16), P29=>Result(17), 
            P30=>Result(18), P31=>Result(19), P32=>Result(20), 
            P33=>Result(21), P34=>Result(22), P35=>Result(23));

end Structure;

-- synopsys translate_off
library ecp;
configuration Structure_CON of Multi_Shifter is
    for Structure
        for all:VHI use entity ecp.VHI(V); end for;
        for all:VLO use entity ecp.VLO(V); end for;
        for all:MULT18X18 use entity ecp.MULT18X18(V); end for;
    end for;
end Structure_CON;

-- synopsys translate_on
